// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum ROLE {
    ADMIN
    CUSTOMER
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          ROLE      @default(CUSTOMER)
    orders        Order[]
    cart          Cart?
    cartId        String?
}

model Cart {
    id       String         @id @default(cuid())
    userId   String         @unique
    user     User           @relation(fields: [userId], references: [id])
    products OrderProduct[]
}

model Order {
    id              String         @id @default(cuid())
    createdAt       DateTime       @default(now())
    user            User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId          String
    stripeSessionId String?
    confirmed       Boolean        @default(false)
    products        OrderProduct[]
}

enum GENDER {
    MALE
    FEMALE
    OTHER
}

model Product {
    id            String         @id @default(uuid())
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    name          String
    description   String
    image         String?
    gender        GENDER[]       @default([MALE, FEMALE, OTHER])
    subcategory   Subcategory?   @relation(fields: [subcategoryId], references: [id])
    subcategoryId Int?
    categoryId    Int?
    sportId       Int?
    basePrice     Float
    onSalePrice   Float
    amountSold    Int            @default(0)
    sizes         Size[]
    orders        OrderProduct[]
    sales         Sale[]
}

model OrderProduct {
    id        Int     @id @default(autoincrement())
    price     Float
    cartId    String?
    cart      Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)
    orderId   String?
    order     Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
    productId String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    sizeId    String
    size      Size    @relation(fields: [sizeId], references: [id])
    colorId   String
    color     Color   @relation(fields: [colorId], references: [id])
}

model Sport {
    id         Int        @id @default(autoincrement())
    name       String
    categories Category[]
}

// Could be Jackets > Bomber jacket, leather jacket, etc.
model Category {
    id            Int           @id @default(autoincrement())
    name          String
    sport         Sport         @relation(fields: [sportId], references: [id])
    sportId       Int
    subcategories Subcategory[]
}

model Subcategory {
    id         Int       @id @default(autoincrement())
    name       String
    Category   Category  @relation(fields: [categoryId], references: [id])
    categoryId Int
    products   Product[]
}

model Sale {
    id        String    @id @default(cuid())
    name      String
    startDate DateTime
    endDate   DateTime
    image     String?
    products  Product[]
}

model Size {
    id        String         @id @default(cuid())
    name      String
    colors    Color[]
    product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    productId String
    orders    OrderProduct[]
}

model Color {
    id     String         @id @default(cuid())
    name   String
    stock  Int
    size   Size           @relation(fields: [sizeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    sizeId String
    orders OrderProduct[]

    @@unique([sizeId, name])
}
